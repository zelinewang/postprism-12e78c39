#!/usr/bin/env python3
"""
PostPrism Environment Setup & Validation Script

This script helps set up and validate the environment variables for the PostPrism backend.

Usage:
    python setup_env.py                    # Interactive setup
    python setup_env.py --example          # Create example .env file
    python setup_env.py --check            # Validate current environment and external service connections
"""

import os
import sys
import argparse
from pathlib import Path

# Define the default configuration template directly in the script for robustness
DEFAULT_ENV_CONFIG_TEMPLATE = """# PostPrism Backend Environment Configuration
# Generated by setup script. Fill in your actual API keys below.

# ----------------------------------------------------
# Core API Keys (Required)
# ----------------------------------------------------
# Used for AI content generation (e.g., for LinkedIn posts)
ANTHROPIC_API_KEY={ANTHROPIC_API_KEY}

# Used for AgentS2.5 main decision making model
OPENAI_API_KEY={OPENAI_API_KEY}

# Used for the ORGO virtual machine environments
ORGO_API_KEY={ORGO_API_KEY}

# Used for HuggingFace model access
HF_TOKEN={HF_TOKEN}

# ----------------------------------------------------
# AgentS2.5 Configuration - Pointing to Your HF Endpoint (Required)
# ----------------------------------------------------
# Main AI model for decision making
AGENTS2_5_MODEL=o3-2025-04-16
AGENTS2_5_MODEL_TYPE=openai
AGENTS2_5_MODEL_URL=
AGENTS2_5_MODEL_API_KEY=

# Grounding model for UI understanding (CRITICAL CONFIGURATION)
AGENTS2_5_GROUNDING_MODEL=ui-tars-1.5-7b
AGENTS2_5_GROUNDING_TYPE=huggingface
# üëá Paste your Hugging Face Endpoint URL here
AGENTS2_5_GROUNDING_URL={AGENTS2_5_GROUNDING_URL}
# üëá Paste your Hugging Face API Key here (it often starts with 'hf_')
AGENTS2_5_GROUNDING_API_KEY={AGENTS2_5_GROUNDING_API_KEY}

# Grounding model resolution (MUST match the model you deployed)
AGENTS2_5_GROUNDING_WIDTH=1920
AGENTS2_5_GROUNDING_HEIGHT=1080

# Agent behavior (Official Defaults)
AGENTS2_5_MAX_TRAJECTORY_LENGTH=8
AGENTS2_5_ENABLE_REFLECTION=true
AGENTS2_5_MAX_STEPS=15
AGENTS2_5_STEP_DELAY=1.0
AGENTS2_5_PLATFORM=darwin

# ----------------------------------------------------
# ORGO Configuration
# ----------------------------------------------------
ORGO_ENDPOINT=https://api.orgo.ai
ORGO_TIMEOUT=300
ORGO_RETRY_ATTEMPTS=3

# Optional: ORGO Project IDs for Persistent VMs
# Leave these blank if you want to use temporary VMs that are destroyed after each run.
# Fill them with your ORGO project IDs to reuse the same VMs, saving login states.
ORGO_LINKEDIN_PROJECT_ID={ORGO_LINKEDIN_PROJECT_ID}
ORGO_TWITTER_PROJECT_ID={ORGO_TWITTER_PROJECT_ID}
ORGO_INSTAGRAM_PROJECT_ID={ORGO_INSTAGRAM_PROJECT_ID}

# ----------------------------------------------------
# PostPrism Application Configuration
# ----------------------------------------------------
FLASK_ENV=development
FLASK_DEBUG=true
FLASK_PORT=8000

# Python path for UI-TARS processing
PYTHON_PATH=/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10

# ----------------------------------------------------
# Frontend Configuration (CRITICAL for demo mode control)
# ----------------------------------------------------
# Disable demo mode for local development
VITE_DEMO_MODE=false
VITE_API_URL=http://localhost:8000
VITE_WS_URL=ws://localhost:8000

# CORS Settings (for frontend-backend communication)
CORS_ORIGINS=http://localhost:8080,https://postprism.lovable.app

# Logging
LOG_LEVEL=INFO
DEBUG_AGENT_ACTIONS=false
DEBUG_SCREENSHOT_SAVE=false
"""

def create_example_env():
    """Create an example .env.example file with placeholder values"""
    # Create a placeholder dictionary for formatting
    placeholder_vars = {
        'ANTHROPIC_API_KEY': 'your_anthropic_api_key_here',
        'OPENAI_API_KEY': 'your_openai_api_key_here',
        'ORGO_API_KEY': 'your_orgo_api_key_here',
        'HF_TOKEN': 'your_huggingface_token_here',
        'AGENTS2_5_GROUNDING_URL': 'https://your-endpoint-id.us-east-1.aws.endpoints.huggingface.cloud',
        'AGENTS2_5_GROUNDING_API_KEY': 'hf_your_hugging_face_api_key',
        'ORGO_LINKEDIN_PROJECT_ID': '',
        'ORGO_TWITTER_PROJECT_ID': '',
        'ORGO_INSTAGRAM_PROJECT_ID': '',
    }
    env_content = DEFAULT_ENV_CONFIG_TEMPLATE.format(**placeholder_vars)
    
    # Create .env.example in project root directory
    project_root = Path(__file__).parent.parent  # Go up from backend/ to project root
    env_path = project_root / '.env.example'
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"\n‚úÖ Created .env.example file with the latest configuration at {env_path}")
    print("Please rename it to .env and fill in your actual API keys and endpoint URL.")

def check_environment_and_connections():
    """Check environment variables and test connections to external services."""
    print("üîç Validating PostPrism Backend Environment...")
    print("=" * 50)

    try:
        from dotenv import load_dotenv
        import requests
        from openai import OpenAI
        from anthropic import Anthropic
        from orgo import Computer
    except ImportError as e:
        print(f"‚ùå Critical dependency missing: {e}")
        print("Please run 'pip install -r requirements.txt' in your virtual environment.")
        sys.exit(1)

    load_dotenv()

    # --- Configuration Checks ---
    print("\n--- Checking API Keys & Endpoints ---")
    config = {
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
        'ANTHROPIC_API_KEY': os.getenv('ANTHROPIC_API_KEY'),
        'ORGO_API_KEY': os.getenv('ORGO_API_KEY'),
        'HF_TOKEN': os.getenv('HF_TOKEN'),
        'AGENTS2_5_GROUNDING_URL': os.getenv('AGENTS2_5_GROUNDING_URL'),
        'AGENTS2_5_GROUNDING_API_KEY': os.getenv('AGENTS2_5_GROUNDING_API_KEY')
    }

    all_vars_set = True
    for key, value in config.items():
        if value:
            print(f"‚úÖ {key}: Set")
        else:
            print(f"‚ùå {key}: Not set in .env file")
            all_vars_set = False

    if not all_vars_set:
        print("\n‚ö†Ô∏è  Some required environment variables are missing. Please update your .env file.")
        sys.exit(1)

    # --- Connection Tests ---
    print("\n--- Testing External Service Connections ---")
    all_connections_ok = True

    # Test OpenAI Connection
    try:
        print("- Testing OpenAI API connection (for AgentS2.5)...")
        client = OpenAI(api_key=config['OPENAI_API_KEY'], timeout=10)
        client.models.list()
        print("  ‚úÖ OpenAI API connection successful.")
    except Exception as e:
        print(f"  ‚ùå OpenAI API connection failed: {e}")
        all_connections_ok = False

    # Test Anthropic Connection
    try:
        print("- Testing Anthropic API connection (for Content Creation)...")
        client = Anthropic(api_key=config['ANTHROPIC_API_KEY'], timeout=10)
        # A simple API call to verify the key, using the fastest model
        client.messages.create(model="claude-3-haiku-20240307", max_tokens=10, messages=[{"role": "user", "content": "Test prompt"}])
        print("  ‚úÖ Anthropic API connection successful.")
    except Exception as e:
        print(f"  ‚ùå Anthropic API connection failed: {e}")
        all_connections_ok = False

    # Test ORGO Connection
    try:
        print("- Testing ORGO API connection (for Virtual Environments)...")
        computer = Computer(api_key=config['ORGO_API_KEY'])
        computer.destroy()
        print("  ‚úÖ ORGO API connection successful.")
    except Exception as e:
        print(f"  ‚ùå ORGO API connection failed: {e}")
        all_connections_ok = False

    # Test Grounding Model Connection
    try:
        print("- Testing Grounding Model (UI-TARS) endpoint...")
        grounding_url = config['AGENTS2_5_GROUNDING_URL']
        if not grounding_url or not grounding_url.startswith('http'):
             raise ValueError("Grounding URL is not a valid http/https url")
        
        # Test with actual API endpoint (not /health which doesn't exist)
        api_url = grounding_url.rstrip('/') + '/chat/completions'
        headers = {
            "Authorization": f"Bearer {config['AGENTS2_5_GROUNDING_API_KEY']}",
            "Content-Type": "application/json"
        }
        
        # Simple test request to verify endpoint is working
        test_payload = {
            "model": "tgi",
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "Test connection"
                        }
                    ]
                }
            ],
            "max_tokens": 5
        }
        
        response = requests.post(api_url, headers=headers, json=test_payload, timeout=15)
        response.raise_for_status()
        print("  ‚úÖ Grounding Model endpoint connection successful.")
    except Exception as e:
        print(f"  ‚ùå Grounding Model endpoint connection failed: {e}")
        print("     - Ensure your Hugging Face endpoint is 'Running' and not 'Sleeping'.")
        print(f"     - Verify the URL (AGENTS2_5_GROUNDING_URL) and API Key (AGENTS2_5_GROUNDING_API_KEY) in your .env file.")
        print("     - The endpoint should end with '/v1/' for OpenAI-compatible API")
        all_connections_ok = False

    # --- Final Verdict ---
    print("=" * 50)
    if all_connections_ok:
        print("üéâ Success! Your environment is correctly configured and all services are reachable.")
        print("üöÄ You are ready to run the PostPrism backend with 'python run.py'.")
    else:
        print("‚ö†Ô∏è  One or more service connection tests failed. Please review the errors above and check your .env configuration.")
        sys.exit(1)

def interactive_setup():
    """Interactive environment setup"""
    print("üöÄ PostPrism Backend Interactive Setup")
    print("=" * 40)
    
    # Create .env in project root directory (not backend directory)
    project_root = Path(__file__).parent.parent  # Go up from backend/ to project root
    env_path = project_root / '.env'
    if env_path.exists():
        print("Found existing .env file in project root. We will now check and update it.")
    
    from dotenv import load_dotenv
    load_dotenv()

    def get_var(key, prompt):
        current_val = os.getenv(key, "")
        if current_val:
            prompt += f" (current: ...{current_val[-4:]}): "
        else:
            prompt += ": "
        user_input = input(prompt).strip()
        return user_input if user_input else current_val

    print("\nüìã Enter your API Keys and Endpoint information:")
    env_vars = {
        'ANTHROPIC_API_KEY': get_var('ANTHROPIC_API_KEY', "Enter your Anthropic API key (for content creation)"),
        'OPENAI_API_KEY': get_var('OPENAI_API_KEY', "Enter your OpenAI API key (for AgentS2.5)"),
        'ORGO_API_KEY': get_var('ORGO_API_KEY', "Enter your ORGO API key (for VMs)"),
        'HF_TOKEN': get_var('HF_TOKEN', "Enter your HuggingFace token (for model access)"),
        'AGENTS2_5_GROUNDING_URL': get_var('AGENTS2_5_GROUNDING_URL', "Enter your Hugging Face Endpoint URL for UI-TARS"),
        'AGENTS2_5_GROUNDING_API_KEY': get_var('AGENTS2_5_GROUNDING_API_KEY', "Enter your Hugging Face API Key"),
        'ORGO_LINKEDIN_PROJECT_ID': get_var('ORGO_LINKEDIN_PROJECT_ID', "LinkedIn project ID (optional)"),
        'ORGO_TWITTER_PROJECT_ID': get_var('ORGO_TWITTER_PROJECT_ID', "Twitter project ID (optional)"),
        'ORGO_INSTAGRAM_PROJECT_ID': get_var('ORGO_INSTAGRAM_PROJECT_ID', "Instagram project ID (optional)"),
    }

    # Format the template with the gathered variables
    final_content = DEFAULT_ENV_CONFIG_TEMPLATE.format(**env_vars)
    
    # Write to project root .env file
    with open(env_path, 'w') as f:
        f.write(final_content)
    
    print(f"\n‚úÖ Environment configuration saved to {env_path}")
    print("\nRunning validation...")
    check_environment_and_connections()

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="PostPrism Environment Setup & Validation")
    parser.add_argument('--example', action='store_true', help='Create an example .env file for manual editing.')
    parser.add_argument('--check', action='store_true', help='Validate the current .env configuration and test service connections.')
    
    args = parser.parse_args()
    
    if args.example:
        create_example_env()
    elif args.check:
        check_environment_and_connections()
    else:
        interactive_setup()

if __name__ == '__main__':
    main()
